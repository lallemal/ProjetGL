class MatriceFloat extends AbstractMatrice{
    float[][] matfloat;

    void setInit(float[][] mat, int nbl, int nbc) {
        this.nbl = nbl;
        this.nbc = nbc;
        this.matfloat = mat;
    }
    // initialise a partir d'un tableau de int creer une copie
    void setInitInt(int[][] mat, int nbl, int nbc) {
        int i = 0;
        int j = 0;
        this.nbl = nbl;
        this.nbc = nbc;
        this.matfloat = new float[nbl][nbc];
        while(i < nbl) {
            while(j < nbc) {
                (this.matfloat)[i][j] = mat[i][j];
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }

    }
    void setInitFloat(float[][] mat, int nbl, int nbc) {
        int i = 0;
        int j = 0;
        this.nbl = nbl;
        this.nbc = nbc;
        this.matfloat = new float[nbl][nbc];
        while(i < nbl) {
            while(j < nbc) {
                (this.matfloat)[i][j] = mat[i][j];
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
    }
    // cree un vecteur de taille (n,1) de 1
    void setOneVector(int n){
        float[][] mat;
        int i = 0;
        this.nbl = n;
        this.nbc = 1;
        mat = new float[this.nbl][1];
        while(i < this.nbl) {
            mat[i][0] = 1;
            i = i + 1;
        }
        this.matfloat = mat;
    }
    void setIndentite(int n) {
        float[][] t; 
        int i = 0;
        int j = 0;
        this.nbl = n;
        this.nbc = n;
        t = new float[n][n];
        while(i < n) {
            while(j < n) {
                if (i == j) {
                    t[i][j] = 1;
                }
                else {
                    t[i][j] = 0;
                }
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
        this.matfloat = t;
    }

    float getCase(int i, int j) {
        return (this.matfloat)[i][j];
    }



    void affichage() {
        int l = 0;
        int c = 0;
        float resultat = 0;
        print("[");
        while(l < this.nbl) {
            while( c < this.nbc){
                if (l == 0 && c == 0) {
                    resultat = (this.matfloat)[l][c];
                    print("[" , resultat);
                }
                else if (l > 0 && c == 0) {
                    resultat = (this.matfloat)[l][c];
                    print(" [", resultat);
                }
                else{
                    resultat = (this.matfloat)[l][c];
                    print(" " , resultat);
                }
                c = c + 1;
                if (c < nbc) {
                    print(",");
                }
            }
            print("]");
            if (l < nbl -1) {
                println(",");
            }
            c = 0;
            l = l + 1;
        }
        println("]");
    }
}

