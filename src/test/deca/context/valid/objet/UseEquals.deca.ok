`> [10, 0] Program
   +> ListDeclClass [List with 1 elements]
   |  []> [10, 6] DeclClass
   |      +> [10, 6] Identifier (A)
   |      |  definition: type defined at [10, 6], type=A
   |      +> Identifier (Object)
   |      |  definition: type (builtin), type=Object
   |      []> [11, 8] DeclField
   |          Visibility: PUBLIC
   |          +> [11, 4] Identifier (int)
   |          |  definition: type (builtin), type=int
   |          +> [11, 8] Identifier (y)
   |          |  definition: field defined at [11, 8], type=int
   |          `> NoInitialization
   `> [14, 0] Main
      +> ListDeclVar [List with 2 elements]
      |  []> [15, 6] DeclVar
      |  ||  +> [15, 4] Identifier (A)
      |  ||  |  definition: type defined at [10, 6], type=A
      |  ||  +> [15, 6] Identifier (a)
      |  ||  |  definition: variable defined at [15, 6], type=A
      |  ||  `> [15, 10] Initialization
      |  ||     `> [15, 10] New
      |  ||        type: A
      |  ||        `> [15, 14] Identifier (A)
      |  ||           definition: type defined at [10, 6], type=A
      |  []> [16, 6] DeclVar
      |      +> [16, 4] Identifier (A)
      |      |  definition: type defined at [10, 6], type=A
      |      +> [16, 6] Identifier (b)
      |      |  definition: variable defined at [16, 6], type=A
      |      `> [16, 10] Initialization
      |         `> [16, 10] New
      |            type: A
      |            `> [16, 14] Identifier (A)
      |               definition: type defined at [10, 6], type=A
      `> ListInst [List with 3 elements]
         []> [18, 4] IfThenElse
         ||  +> [18, 8] MethodCall
         ||  |  type: boolean
         ||  |  +> [18, 8] Identifier (a)
         ||  |  |  definition: variable defined at [15, 6], type=A
         ||  |  +> [18, 10] Identifier (equals)
         ||  |  |  definition: method (builtin), type=boolean
         ||  |  []> [18, 17] Identifier (b)
         ||  |      definition: variable defined at [16, 6], type=A
         ||  +> ListInst [List with 1 elements]
         ||  |  []> [19, 8] Println
         ||  |      `> [19, 16] ListExpr [List with 1 elements]
         ||  |         []> [19, 16] StringLiteral (Ils sont égaux!!)
         ||  |             type: string
         ||  `> ListInst [List with 1 elements]
         ||     []> [22, 8] Println
         ||         `> [22, 16] ListExpr [List with 1 elements]
         ||            []> [22, 16] StringLiteral (Ils ne sont pas égaux...)
         ||                type: string
         []> [24, 4] Assign
         ||  type: A
         ||  +> [24, 4] Identifier (a)
         ||  |  definition: variable defined at [15, 6], type=A
         ||  `> [24, 8] Identifier (b)
         ||     definition: variable defined at [16, 6], type=A
         []> [25, 4] IfThenElse
             +> [25, 8] MethodCall
             |  type: boolean
             |  +> [25, 8] Identifier (a)
             |  |  definition: variable defined at [15, 6], type=A
             |  +> [25, 10] Identifier (equals)
             |  |  definition: method (builtin), type=boolean
             |  []> [25, 17] Identifier (b)
             |      definition: variable defined at [16, 6], type=A
             +> ListInst [List with 1 elements]
             |  []> [26, 8] Println
             |      `> [26, 16] ListExpr [List with 1 elements]
             |         []> [26, 16] StringLiteral (Ils sont égaux!!)
             |             type: string
             `> ListInst [List with 1 elements]
                []> [29, 8] Println
                    `> [29, 16] ListExpr [List with 1 elements]
                       []> [29, 16] StringLiteral (Ils ne sont pas égaux...)
                           type: string
