class MatriceFloat extends AbstractMatrice{
    float[][] matfloat;

    // initialise la matrice en passant en reference le tableau
    void setInit(float[][] mat, int nbl, int nbc) {
        this.nbl = nbl;
        this.nbc = nbc;
        this.matfloat = mat;
    }
    // initialise a partir d'un tableau de int creer une copie
    void setInitInt(int[][] mat, int nbl, int nbc) {
        int i = 0;
        int j = 0;
        this.nbl = nbl;
        this.nbc = nbc;
        this.matfloat = new float[nbl][nbc];
        while(i < nbl) {
            while(j < nbc) {
                (this.matfloat)[i][j] = mat[i][j];
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }

    }

    // initialise a partir d'un tableau de float creer une copie
    void setInitFloat(float[][] mat, int nbl, int nbc) {
        int i = 0;
        int j = 0;
        this.nbl = nbl;
        this.nbc = nbc;
        this.matfloat = new float[nbl][nbc];
        while(i < nbl) {
            while(j < nbc) {
                (this.matfloat)[i][j] = mat[i][j];
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
    }

    // cree un vecteur de taille (n,1) de 1
    void setOneVector(int n){
        float[][] mat;
        int i = 0;
        this.nbl = n;
        this.nbc = 1;
        mat = new float[this.nbl][1];
        while(i < this.nbl) {
            mat[i][0] = 1;
            i = i + 1;
        }
        this.matfloat = mat;
    }

    // initialie une matrice identite de taille n
    void setIndentite(int n) {
        float[][] t; 
        int i = 0;
        int j = 0;
        this.nbl = n;
        this.nbc = n;
        t = new float[n][n];
        while(i < n) {
            while(j < n) {
                if (i == j) {
                    t[i][j] = 1;
                }
                else {
                    t[i][j] = 0;
                }
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
        this.matfloat = t;
    }

    // acces a un element de la matrice
    float getCase(int i, int j) {
        return (this.matfloat)[i][j];
    }

    boolean setCase(float valeur, int i, int j){
        if(i >= this.nbl || i < 0){
            return false;
        }
        if (j >= this.nbc || j < 0){
            return false;
        }
        (this.matfloat)[i][j] = valeur; 
        return true;
    }

    // affichage de la matrice
    void affichage() {
        int l = 0;
        int c = 0;
        float resultat = 0;
        print("[");
        while(l < this.nbl) {
            while( c < this.nbc){
                if (l == 0 && c == 0) {
                    resultat = (this.matfloat)[l][c];
                    print("[" , resultat);
                }
                else if (l > 0 && c == 0) {
                    resultat = (this.matfloat)[l][c];
                    print(" [", resultat);
                }
                else{
                    resultat = (this.matfloat)[l][c];
                    print(" " , resultat);
                }
                c = c + 1;
                if (c < nbc) {
                    print(",");
                }
            }
            print("]");
            if (l < nbl -1) {
                println(",");
            }
            c = 0;
            l = l + 1;
        }
        println("]");
    }


    // somme les deux matrices renvoir null si pas possible
    // renvoi une nouvelle matrice 0(n) en memoire
    MatriceFloat sumMat(MatriceFloat m) {
        float [][] tabfinal;
        MatriceFloat matfinal;
        int i = 0;
        int j = 0;
        if (this.nbc != m.getNbc() && this.nbl != m.nbl) {
            return null;
        }
        tabfinal = new float[this.nbl][m.getNbc()];
        matfinal = new MatriceFloat();
        matfinal.setInit(tabfinal, this.nbl, m.getNbc());
        while(i < this.nbl) {
            while (j < this.nbc) {
                tabfinal[i][j] = (this.matfloat)[i][j] + m.getCase(i, j);
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
        return matfinal;
    }

    




    // produit matriciel
    MatriceFloat prodMat(MatriceFloat m) {
        int l = 0;
        int c = 0;
        int i = 0;
        int j = 0;
        int k = 0;
        float [][] tabfinal = new float[this.nbl][m.getNbc()];
        MatriceFloat matfinal = new MatriceFloat();

        if(this.nbc != m.getNbl()) {
            return null;
        }

        // initialisation du tableau a 0
        while(l < this.nbl){
            while (c < m.getNbc()){
                tabfinal[l][c] = 0;
                c = c + 1;
            }
            c = 0;
            l = l + 1;
        }
        matfinal.setInit(tabfinal, this.nbl, m.getNbc());
        while(i < this.nbl) {
            while( j < m.getNbc()) {
                while(k < this.nbc) {
                    tabfinal[i][j] = tabfinal[i][j] + (this.matfloat)[i][k]* m.getCase(k, j);
                    k = k + 1;
                }
                k = 0;
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
        return matfinal;
    }












    // transpose la matrice et en renvoi une nouvelle 0(n2) en memoire
    MatriceFloat transpose() {
        float[][] tab; 
        MatriceFloat transpose;
        int i = 0;
        int j = 0;
        tab = new float[this.getNbc()][this.getNbl()];
        while (i < this.nbc) {
            while(j < this.nbl) {
                tab[i][j] = this.getCase(j, i);
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
        transpose = new MatriceFloat();
        transpose.setInit(tab, this.getNbc(), this.getNbl());
        return transpose;
    }



    /* algorithme utilse pivot de Gauss transforme la matrice directement*/

    // echange deux lignes
    void echange(int li, int  lj) {
        int i = 0;
        float[] copieligne = new float[this.getNbc()];
        while (i < this.nbc) {
            copieligne[i] = (this.matfloat)[li][i];
            i = i + 1;
        }
        i = 0;
        // copie de lj dans li
        while (i < this.nbc) {
            (this.matfloat)[li][i] = (this.matfloat)[lj][i];
            i = i + 1;
        }
        i = 0;
        // copie de li dans lj
        while (i < this.nbc) {
            (this.matfloat)[lj][i] = copieligne[i];
            i = i + 1;
        }
    }

    // multiplication par un scalaire non nul renvoi false si echoue
    boolean multScal(int li, float scalaire) {
        int i = 0;
        if(scalaire == 0) {
            return false;
        }
        while(i < this.nbc) {
            (this.matfloat)[li][i] = (this.matfloat)[li][i]* scalaire;
            i = i + 1;
        }
        return true;
    }


    // ajout du multiple par une autre ligne ex: L1 <- L1 + x*L2
    void addMultLine(int lmodif, int lscal, float scalaire) {
        int i = 0;
        while(i < this.nbc) {
            (this.matfloat)[lmodif][i] = (this.matfloat)[lmodif][i] +(this.matfloat)[lscal][i] * scalaire;
            i = i + 1;
        }
    }

    // retourne la valeur absolue du flottant
    float absolue (float i) {
        float res = i;
        if (i < 0) {
            res = -i;
        }
        return res;
    }

    // tourve la ligne  dans colonne i avec la valeur aboslue la plus grand 
    //retourne l'indice de ligne le plus grand
    int indicePivot(int icolonne, int r) {
        float compare;
        int i = r+1;
        // indice du max
        int indice = i;
        float max = this.absolue((this.matfloat)[i][icolonne]);
        while(i < this.nbl) {
            compare = this.absolue((this.matfloat)[i][icolonne]);
            if(max < compare) {
                indice = i;
            }
            i = i + 1;
        }
        return indice;
    }



    // calcul la matrice inverse
    MatriceFloat inverse() {
        int k;
        int r = -1; // indice dernier pivot
        int j = 0;
        int i = 0;
        // creation de l'inverse copie car algo modifie la matrice
        MatriceFloat inverse = new MatriceFloat();
	    int line = 0;
	    int column = 0;

        MatriceFloat copie = new MatriceFloat();
       
        copie.setInitFloat(this.matfloat, this.nbl, this.nbc);
        // creation de l'identite
        inverse.setIndentite(this.nbl);
        while(j < this.nbc) {
            k = indicePivot(j,r);

            // si pivot nul on change de colonne
            if(this.absolue((copie.matfloat)[k][j]) > 0.00000001) {
                r = r + 1;

                // on effectue les meme operation sur l'identite et la matrice
                inverse.multScal(k, 1/((copie.matfloat)[k][j]));
                copie.multScal(k, 1/((copie.matfloat)[k][j]));
                if (k != r) {
                    // on  place le pivot a la ligne r si pas encore le cas
                    inverse.echange(k, r);
                    copie.echange(k, r);
                }
                while(i < this.nbl) {
                    // simplifie les autres lignes
                    if (i != r) {
                        inverse.addMultLine(i, r, (-1)*(copie.matfloat)[i][j]);
                        copie.addMultLine(i, r, (-1)*(copie.matfloat)[i][j]);
                    }
                    i = i + 1;
                }
                i = 0;
            }
            else {
                // on a trouve une colonne null => non inversible
                return null;
            }
            j = j + 1;
        }
        return inverse;
    }

    // Calcul du determinant par pivot de gauss
    float determinant() {
        int r = -1; // indice dernier pivot
        int j = 0;
        int i = 0;
        int k = 0;
        float res = 0;
        float determinant = 1;
        // copie de matrice on fait calcul dessus
        MatriceFloat copie = new MatriceFloat();
        copie.setInitFloat(this.matfloat,this.nbl, this.nbc);

        // trigonalise la matrice
        while(j < this.nbc) {
            k = copie.indicePivot(j,r);
            if(copie.absolue((copie.matfloat)[k][j]) > 0.0000001) {
                // diviser la ligne par la valeur du pivot
                r = r + 1;
                determinant = determinant * (copie.matfloat)[k][j];
                copie.multScal(k, 1/(copie.matfloat)[k][j]);
                if (k != r) {
                    // on  place le pivot a la ligne r si pas encore le cas
                    copie.echange(k, r);
                    // permutation => *(-1)
                    determinant = determinant * (-1);
                }

                while(i < this.nbl) {
                    // simplifie les autres lignes
                    if (i != r) {
                        copie.addMultLine(i, r, (-1)*(copie.matfloat)[i][j]);
                    }
                    i = i + 1;
                }
                i = 0;
            }
            else {
                // pivot nul => det = 0
                return res;
            }
            j = j + 1;
        }
        return determinant;
    }


    /* fonction pour le calcul des vecteurs propres*/


    // multiplie par un scalaire les composantes, renvoie une nouvelle matrice
    MatriceFloat multScalaire(float scalaire) {
        int i = 0;
        int j = 0;
        MatriceFloat res = new MatriceFloat();
        float[][] f = new float[this.nbl][this.nbc];
        while(i < this.nbl) {
            while(j < this.nbc) {
                f[i][j] = (this.matfloat)[i][j] * scalaire;
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
        res.setInit(f,this.nbl,this.nbc);
        return res;
    }

    // multiplie par un scalaire modifie directement la matrice
    void multi(float scalaire) {
        int i = 0;
        int j = 0;
        while(i < this.nbl) {
            while(j < this.nbc) {
                (this.matfloat)[i][j] = (this.matfloat)[i][j] * scalaire;
                j = j + 1;
            }
            j = 0;
            i = i + 1;
        }
    }

    // convertie en flottant si tableau de dim (1,1)
    float convertTofloat() {
        return (this.matfloat)[0][0];
    }

    // nomre euclidienne du vecteur
    float normeVect() {
        float res = 0;
        float mult = 0;
        int i = 0;

        Racine r;

        if (this.nbc != 1) {
                print("oui");
            return res;
        }
        r = new Racine();
        // calcul des carre puis racine a la fin
        while (i < this.nbl) {
            res = res + (this.matfloat)[i][0]* (this.matfloat)[i][0];
            i = i + 1;
        }
        return r.sqrt(res);
    }


    // calcul du rayon spectral par lam methode des puissances
    // determine valeur propre et vecteur propre
    // rayon spectral = plus boule contenant toute les valeur prorpes
    // entree vecteur propre + matrice = sortie valeur propre
    // seuil par defaut de 1.0E-5

    // renvoi la valeur du rayon spcetral (plus grande valeur de la vlp)
    float Puissancevpvectp() {
        return PuissancevpWithAcc(this , 1.0E-5); 
    }

    float PuissanceInverse(float nu) {
        return PuissanceInverseWithAcc(nu,1.0E-5);
    }

    float PuissancevpvectpWithAcc(float seuille){
        return PuissancevpWithAcc(this,seuille);
    }

    // calcul une valeur propre et vecteur propre
    // en rentrant une approximation de la vlp
    // renvoi la vlp et la vcp la plus proche de celle 
    // mise en entree
    float PuissanceInverseWithAcc(float nu, float seuille){
        // calculer (A-uId)-1
        // identite
        MatriceFloat f;
        MatriceFloat id = new MatriceFloat();
        id.setIndentite(this.nbl);
        id.multi(-nu);
        f = id.sumMat(this);
        f = f.inverse();
        return (1/this.PuissancevpWithAcc(f, seuille)) + nu;
    }

    float PuissancevpWithAcc(MatriceFloat a, float seuille) {
        int i = 0;
        float vlpinit = 0;
        float vlp = 0;
        float seuil = seuille;
        // vecteur initialisation
        MatriceFloat transpose;
        MatriceFloat vecteurx = new MatriceFloat();
        MatriceFloat vecteury = new MatriceFloat();
        vecteurx.setOneVector(this.nbl);
        // vecteur resultat
        vecteury = a.prodMat(vecteurx);
        vecteurx = vecteury.multScalaire(1/vecteury.normeVect());
        transpose = vecteurx.transpose();
        vlp = transpose.prodMat(a.prodMat(vecteurx)).convertTofloat();
        while(this.absolue(vlp - vlpinit) > seuil) {
            vlpinit = vlp;
            vecteury = a.prodMat(vecteurx);
            vecteurx = vecteury.multScalaire(1/vecteury.normeVect());
            transpose = vecteurx.transpose();

            vlp = transpose.prodMat(a.prodMat(vecteurx)).convertTofloat();
        }
        vecteurx.affichage();
        return vlp;
    }

    /*algorithme QR pour recherche du spectre d"une matrice carre"*/
    float signe(float i) {
        float s = 1;
        if(i > 0) {
            s = -1;
        }
        return s;

    }
    void multscalVect(float[][] f, float scalaire, int size) {
        int c = 0;
        while(c < size) {
            // calcul de la racine
            f[c][0] = f[c][0] * scalaire; 
            c = c + 1;
        }

    }


    // sert a calculer Qi car les deux matrices pas meme dimension
    void sommeMat(MatriceFloat id, MatriceFloat vtv) {

        float valeur;
        int ligne = id.getNbl() - vtv.getNbl();
        int colonne = id.getNbc() - vtv.getNbc();
        int  l = ligne;
        int c = colonne;
        while(l < id.getNbl()) {
            while(c < id.getNbc()) {
                valeur = id.getCase(l, c) + vtv.getCase(l - ligne, c - ligne);
                id.setCase(valeur, l, c);
                c = c + 1;
            }
            c = colonne;
            l = l + 1;
        }
    }

    // calcul la matrice premiere etape
    MatriceFloat decompositionQRi(int ic) {

        MatriceFloat transpose;
        MatriceFloat prod;
        float racine = 0;
        int c = 0;
        int i = 0;
        float alpha = this.signe(this.getCase(0, ic));
        MatriceFloat qi = new MatriceFloat();
        MatriceFloat vect = new MatriceFloat();
        float[][] res = new float[this.nbl- ic][1];
        Racine r = new Racine();

        //initialisation de res
        while(i < this.nbl - ic){
            res[i][0] = 0.0;
            i = i + 1;
        }
        while(c < this.nbl - ic) {

            res[c][0] = (this.matfloat)[c + ic][ic] ;
            // calcul de la racine norme du vecteur a l'indice i de la matrice
            racine = racine + (this.matfloat)[c + ic][ic]* (this.matfloat)[c + ic][ic];
            c = c + 1;
        }
        // norme de alpha = norme de x
        res[0][0] = res[0][0] + alpha * r.sqrt(racine);
        // res = vecteur u
        racine = 0;
        c = 0;
        // calcul de la norme de u
        while(c < this.nbl - ic) {
            racine = racine + res[c][0] * res[c][0]; 
            c = c + 1;

        }

        // avec sous matrice
        // divise par norme de u pour avoir v
        this.multscalVect(res,1/r.sqrt(racine) , this.nbc - ic);

        // vecteur de taille this.nbl - ic
        vect.setInit(res, this.nbl - ic, 1);
        // valeur de u/||u||

        transpose = vect.transpose();

        // vtv
        prod = vect.prodMat(transpose);

        prod.multi(-2.0);
        qi.setIndentite(this.nbc);
        sommeMat(qi,prod);

        return qi;
    }






    // renvoi Q de la matrice
    MatriceFloat calculQt() {
        int i = 0;
        MatriceFloat qi = new MatriceFloat();
        MatriceFloat res = new MatriceFloat();
        MatriceFloat decompo = this;
        res.setIndentite(this.nbl);
        while(i < this.nbc - 1) {
            //A -> Q1A
            qi = decompo.decompositionQRi(i);
            res = qi.prodMat(res);
            decompo = qi.prodMat(decompo);
            i = i + 1;
        }
        return res;
    }

    MatriceFloat algorithmeQR(int interation) {
        int i = 0;
        MatriceFloat qt;
        MatriceFloat r; 
        MatriceFloat a = this;
        while(i < interation) {
            // q
            qt = a.calculQt();
			
            r = qt.prodMat(a);
            a = r.prodMat(qt.transpose());
            i = i + 1;
        }
        return a;
    }

}
